// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"api"
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  Response setQuota(string ownerRole, ResourceAggregate quota)")
	fmt.Fprintln(os.Stderr, "  Response forceTaskState(string taskId, ScheduleStatus status)")
	fmt.Fprintln(os.Stderr, "  Response performBackup()")
	fmt.Fprintln(os.Stderr, "  Response listBackups()")
	fmt.Fprintln(os.Stderr, "  Response stageRecovery(string backupId)")
	fmt.Fprintln(os.Stderr, "  Response queryRecovery(TaskQuery query)")
	fmt.Fprintln(os.Stderr, "  Response deleteRecoveryTasks(TaskQuery query)")
	fmt.Fprintln(os.Stderr, "  Response commitRecovery()")
	fmt.Fprintln(os.Stderr, "  Response unloadRecovery()")
	fmt.Fprintln(os.Stderr, "  Response startMaintenance(Hosts hosts)")
	fmt.Fprintln(os.Stderr, "  Response drainHosts(Hosts hosts)")
	fmt.Fprintln(os.Stderr, "  Response maintenanceStatus(Hosts hosts)")
	fmt.Fprintln(os.Stderr, "  Response endMaintenance(Hosts hosts)")
	fmt.Fprintln(os.Stderr, "  Response snapshot()")
	fmt.Fprintln(os.Stderr, "  Response rewriteConfigs(RewriteConfigsRequest request)")
	fmt.Fprintln(os.Stderr, "  Response createJob(JobConfiguration description, Lock lock)")
	fmt.Fprintln(os.Stderr, "  Response scheduleCronJob(JobConfiguration description, Lock lock)")
	fmt.Fprintln(os.Stderr, "  Response descheduleCronJob(JobKey job, Lock lock)")
	fmt.Fprintln(os.Stderr, "  Response startCronJob(JobKey job)")
	fmt.Fprintln(os.Stderr, "  Response restartShards(JobKey job,  shardIds, Lock lock)")
	fmt.Fprintln(os.Stderr, "  Response killTasks(TaskQuery query, Lock lock, JobKey job,  instances)")
	fmt.Fprintln(os.Stderr, "  Response addInstances(AddInstancesConfig config, Lock lock, InstanceKey key, i32 count)")
	fmt.Fprintln(os.Stderr, "  Response acquireLock(LockKey lockKey)")
	fmt.Fprintln(os.Stderr, "  Response releaseLock(Lock lock, LockValidation validation)")
	fmt.Fprintln(os.Stderr, "  Response replaceCronTemplate(JobConfiguration config, Lock lock)")
	fmt.Fprintln(os.Stderr, "  Response startJobUpdate(JobUpdateRequest request, string message)")
	fmt.Fprintln(os.Stderr, "  Response pauseJobUpdate(JobUpdateKey key, string message)")
	fmt.Fprintln(os.Stderr, "  Response resumeJobUpdate(JobUpdateKey key, string message)")
	fmt.Fprintln(os.Stderr, "  Response abortJobUpdate(JobUpdateKey key, string message)")
	fmt.Fprintln(os.Stderr, "  Response pulseJobUpdate(JobUpdateKey key)")
	fmt.Fprintln(os.Stderr, "  Response getRoleSummary()")
	fmt.Fprintln(os.Stderr, "  Response getJobSummary(string role)")
	fmt.Fprintln(os.Stderr, "  Response getTasksStatus(TaskQuery query)")
	fmt.Fprintln(os.Stderr, "  Response getTasksWithoutConfigs(TaskQuery query)")
	fmt.Fprintln(os.Stderr, "  Response getPendingReason(TaskQuery query)")
	fmt.Fprintln(os.Stderr, "  Response getConfigSummary(JobKey job)")
	fmt.Fprintln(os.Stderr, "  Response getJobs(string ownerRole)")
	fmt.Fprintln(os.Stderr, "  Response getQuota(string ownerRole)")
	fmt.Fprintln(os.Stderr, "  Response populateJobConfig(JobConfiguration description)")
	fmt.Fprintln(os.Stderr, "  Response getLocks()")
	fmt.Fprintln(os.Stderr, "  Response getJobUpdateSummaries(JobUpdateQuery jobUpdateQuery)")
	fmt.Fprintln(os.Stderr, "  Response getJobUpdateDetails(JobUpdateKey key)")
	fmt.Fprintln(os.Stderr, "  Response getJobUpdateDiff(JobUpdateRequest request)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := api.NewAuroraAdminClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "setQuota":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetQuota requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg402 := flag.Arg(2)
		mbTrans403 := thrift.NewTMemoryBufferLen(len(arg402))
		defer mbTrans403.Close()
		_, err404 := mbTrans403.WriteString(arg402)
		if err404 != nil {
			Usage()
			return
		}
		factory405 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt406 := factory405.GetProtocol(mbTrans403)
		argvalue1 := api.NewResourceAggregate()
		err407 := argvalue1.Read(jsProt406)
		if err407 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.SetQuota(value0, value1))
		fmt.Print("\n")
		break
	case "forceTaskState":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ForceTaskState requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := api.ScheduleStatus(tmp1)
		value1 := argvalue1
		fmt.Print(client.ForceTaskState(value0, value1))
		fmt.Print("\n")
		break
	case "performBackup":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "PerformBackup requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.PerformBackup())
		fmt.Print("\n")
		break
	case "listBackups":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "ListBackups requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.ListBackups())
		fmt.Print("\n")
		break
	case "stageRecovery":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StageRecovery requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.StageRecovery(value0))
		fmt.Print("\n")
		break
	case "queryRecovery":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "QueryRecovery requires 1 args")
			flag.Usage()
		}
		arg410 := flag.Arg(1)
		mbTrans411 := thrift.NewTMemoryBufferLen(len(arg410))
		defer mbTrans411.Close()
		_, err412 := mbTrans411.WriteString(arg410)
		if err412 != nil {
			Usage()
			return
		}
		factory413 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt414 := factory413.GetProtocol(mbTrans411)
		argvalue0 := api.NewTaskQuery()
		err415 := argvalue0.Read(jsProt414)
		if err415 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.QueryRecovery(value0))
		fmt.Print("\n")
		break
	case "deleteRecoveryTasks":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteRecoveryTasks requires 1 args")
			flag.Usage()
		}
		arg416 := flag.Arg(1)
		mbTrans417 := thrift.NewTMemoryBufferLen(len(arg416))
		defer mbTrans417.Close()
		_, err418 := mbTrans417.WriteString(arg416)
		if err418 != nil {
			Usage()
			return
		}
		factory419 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt420 := factory419.GetProtocol(mbTrans417)
		argvalue0 := api.NewTaskQuery()
		err421 := argvalue0.Read(jsProt420)
		if err421 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DeleteRecoveryTasks(value0))
		fmt.Print("\n")
		break
	case "commitRecovery":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "CommitRecovery requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.CommitRecovery())
		fmt.Print("\n")
		break
	case "unloadRecovery":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "UnloadRecovery requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.UnloadRecovery())
		fmt.Print("\n")
		break
	case "startMaintenance":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StartMaintenance requires 1 args")
			flag.Usage()
		}
		arg422 := flag.Arg(1)
		mbTrans423 := thrift.NewTMemoryBufferLen(len(arg422))
		defer mbTrans423.Close()
		_, err424 := mbTrans423.WriteString(arg422)
		if err424 != nil {
			Usage()
			return
		}
		factory425 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt426 := factory425.GetProtocol(mbTrans423)
		argvalue0 := api.NewHosts()
		err427 := argvalue0.Read(jsProt426)
		if err427 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.StartMaintenance(value0))
		fmt.Print("\n")
		break
	case "drainHosts":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DrainHosts requires 1 args")
			flag.Usage()
		}
		arg428 := flag.Arg(1)
		mbTrans429 := thrift.NewTMemoryBufferLen(len(arg428))
		defer mbTrans429.Close()
		_, err430 := mbTrans429.WriteString(arg428)
		if err430 != nil {
			Usage()
			return
		}
		factory431 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt432 := factory431.GetProtocol(mbTrans429)
		argvalue0 := api.NewHosts()
		err433 := argvalue0.Read(jsProt432)
		if err433 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DrainHosts(value0))
		fmt.Print("\n")
		break
	case "maintenanceStatus":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "MaintenanceStatus requires 1 args")
			flag.Usage()
		}
		arg434 := flag.Arg(1)
		mbTrans435 := thrift.NewTMemoryBufferLen(len(arg434))
		defer mbTrans435.Close()
		_, err436 := mbTrans435.WriteString(arg434)
		if err436 != nil {
			Usage()
			return
		}
		factory437 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt438 := factory437.GetProtocol(mbTrans435)
		argvalue0 := api.NewHosts()
		err439 := argvalue0.Read(jsProt438)
		if err439 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.MaintenanceStatus(value0))
		fmt.Print("\n")
		break
	case "endMaintenance":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "EndMaintenance requires 1 args")
			flag.Usage()
		}
		arg440 := flag.Arg(1)
		mbTrans441 := thrift.NewTMemoryBufferLen(len(arg440))
		defer mbTrans441.Close()
		_, err442 := mbTrans441.WriteString(arg440)
		if err442 != nil {
			Usage()
			return
		}
		factory443 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt444 := factory443.GetProtocol(mbTrans441)
		argvalue0 := api.NewHosts()
		err445 := argvalue0.Read(jsProt444)
		if err445 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.EndMaintenance(value0))
		fmt.Print("\n")
		break
	case "snapshot":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Snapshot requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Snapshot())
		fmt.Print("\n")
		break
	case "rewriteConfigs":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RewriteConfigs requires 1 args")
			flag.Usage()
		}
		arg446 := flag.Arg(1)
		mbTrans447 := thrift.NewTMemoryBufferLen(len(arg446))
		defer mbTrans447.Close()
		_, err448 := mbTrans447.WriteString(arg446)
		if err448 != nil {
			Usage()
			return
		}
		factory449 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt450 := factory449.GetProtocol(mbTrans447)
		argvalue0 := api.NewRewriteConfigsRequest()
		err451 := argvalue0.Read(jsProt450)
		if err451 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.RewriteConfigs(value0))
		fmt.Print("\n")
		break
	case "createJob":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateJob requires 2 args")
			flag.Usage()
		}
		arg452 := flag.Arg(1)
		mbTrans453 := thrift.NewTMemoryBufferLen(len(arg452))
		defer mbTrans453.Close()
		_, err454 := mbTrans453.WriteString(arg452)
		if err454 != nil {
			Usage()
			return
		}
		factory455 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt456 := factory455.GetProtocol(mbTrans453)
		argvalue0 := api.NewJobConfiguration()
		err457 := argvalue0.Read(jsProt456)
		if err457 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg458 := flag.Arg(2)
		mbTrans459 := thrift.NewTMemoryBufferLen(len(arg458))
		defer mbTrans459.Close()
		_, err460 := mbTrans459.WriteString(arg458)
		if err460 != nil {
			Usage()
			return
		}
		factory461 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt462 := factory461.GetProtocol(mbTrans459)
		argvalue1 := api.NewLock()
		err463 := argvalue1.Read(jsProt462)
		if err463 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.CreateJob(value0, value1))
		fmt.Print("\n")
		break
	case "scheduleCronJob":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ScheduleCronJob requires 2 args")
			flag.Usage()
		}
		arg464 := flag.Arg(1)
		mbTrans465 := thrift.NewTMemoryBufferLen(len(arg464))
		defer mbTrans465.Close()
		_, err466 := mbTrans465.WriteString(arg464)
		if err466 != nil {
			Usage()
			return
		}
		factory467 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt468 := factory467.GetProtocol(mbTrans465)
		argvalue0 := api.NewJobConfiguration()
		err469 := argvalue0.Read(jsProt468)
		if err469 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg470 := flag.Arg(2)
		mbTrans471 := thrift.NewTMemoryBufferLen(len(arg470))
		defer mbTrans471.Close()
		_, err472 := mbTrans471.WriteString(arg470)
		if err472 != nil {
			Usage()
			return
		}
		factory473 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt474 := factory473.GetProtocol(mbTrans471)
		argvalue1 := api.NewLock()
		err475 := argvalue1.Read(jsProt474)
		if err475 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.ScheduleCronJob(value0, value1))
		fmt.Print("\n")
		break
	case "descheduleCronJob":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DescheduleCronJob requires 2 args")
			flag.Usage()
		}
		arg476 := flag.Arg(1)
		mbTrans477 := thrift.NewTMemoryBufferLen(len(arg476))
		defer mbTrans477.Close()
		_, err478 := mbTrans477.WriteString(arg476)
		if err478 != nil {
			Usage()
			return
		}
		factory479 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt480 := factory479.GetProtocol(mbTrans477)
		argvalue0 := api.NewJobKey()
		err481 := argvalue0.Read(jsProt480)
		if err481 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg482 := flag.Arg(2)
		mbTrans483 := thrift.NewTMemoryBufferLen(len(arg482))
		defer mbTrans483.Close()
		_, err484 := mbTrans483.WriteString(arg482)
		if err484 != nil {
			Usage()
			return
		}
		factory485 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt486 := factory485.GetProtocol(mbTrans483)
		argvalue1 := api.NewLock()
		err487 := argvalue1.Read(jsProt486)
		if err487 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.DescheduleCronJob(value0, value1))
		fmt.Print("\n")
		break
	case "startCronJob":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StartCronJob requires 1 args")
			flag.Usage()
		}
		arg488 := flag.Arg(1)
		mbTrans489 := thrift.NewTMemoryBufferLen(len(arg488))
		defer mbTrans489.Close()
		_, err490 := mbTrans489.WriteString(arg488)
		if err490 != nil {
			Usage()
			return
		}
		factory491 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt492 := factory491.GetProtocol(mbTrans489)
		argvalue0 := api.NewJobKey()
		err493 := argvalue0.Read(jsProt492)
		if err493 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.StartCronJob(value0))
		fmt.Print("\n")
		break
	case "restartShards":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "RestartShards requires 3 args")
			flag.Usage()
		}
		arg494 := flag.Arg(1)
		mbTrans495 := thrift.NewTMemoryBufferLen(len(arg494))
		defer mbTrans495.Close()
		_, err496 := mbTrans495.WriteString(arg494)
		if err496 != nil {
			Usage()
			return
		}
		factory497 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt498 := factory497.GetProtocol(mbTrans495)
		argvalue0 := api.NewJobKey()
		err499 := argvalue0.Read(jsProt498)
		if err499 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg500 := flag.Arg(2)
		mbTrans501 := thrift.NewTMemoryBufferLen(len(arg500))
		defer mbTrans501.Close()
		_, err502 := mbTrans501.WriteString(arg500)
		if err502 != nil {
			Usage()
			return
		}
		factory503 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt504 := factory503.GetProtocol(mbTrans501)
		containerStruct1 := api.NewAuroraAdminRestartShardsArgs()
		err505 := containerStruct1.ReadField2(jsProt504)
		if err505 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.ShardIds
		value1 := argvalue1
		arg506 := flag.Arg(3)
		mbTrans507 := thrift.NewTMemoryBufferLen(len(arg506))
		defer mbTrans507.Close()
		_, err508 := mbTrans507.WriteString(arg506)
		if err508 != nil {
			Usage()
			return
		}
		factory509 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt510 := factory509.GetProtocol(mbTrans507)
		argvalue2 := api.NewLock()
		err511 := argvalue2.Read(jsProt510)
		if err511 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.RestartShards(value0, value1, value2))
		fmt.Print("\n")
		break
	case "killTasks":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "KillTasks requires 4 args")
			flag.Usage()
		}
		arg512 := flag.Arg(1)
		mbTrans513 := thrift.NewTMemoryBufferLen(len(arg512))
		defer mbTrans513.Close()
		_, err514 := mbTrans513.WriteString(arg512)
		if err514 != nil {
			Usage()
			return
		}
		factory515 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt516 := factory515.GetProtocol(mbTrans513)
		argvalue0 := api.NewTaskQuery()
		err517 := argvalue0.Read(jsProt516)
		if err517 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg518 := flag.Arg(2)
		mbTrans519 := thrift.NewTMemoryBufferLen(len(arg518))
		defer mbTrans519.Close()
		_, err520 := mbTrans519.WriteString(arg518)
		if err520 != nil {
			Usage()
			return
		}
		factory521 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt522 := factory521.GetProtocol(mbTrans519)
		argvalue1 := api.NewLock()
		err523 := argvalue1.Read(jsProt522)
		if err523 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg524 := flag.Arg(3)
		mbTrans525 := thrift.NewTMemoryBufferLen(len(arg524))
		defer mbTrans525.Close()
		_, err526 := mbTrans525.WriteString(arg524)
		if err526 != nil {
			Usage()
			return
		}
		factory527 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt528 := factory527.GetProtocol(mbTrans525)
		argvalue2 := api.NewJobKey()
		err529 := argvalue2.Read(jsProt528)
		if err529 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg530 := flag.Arg(4)
		mbTrans531 := thrift.NewTMemoryBufferLen(len(arg530))
		defer mbTrans531.Close()
		_, err532 := mbTrans531.WriteString(arg530)
		if err532 != nil {
			Usage()
			return
		}
		factory533 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt534 := factory533.GetProtocol(mbTrans531)
		containerStruct3 := api.NewAuroraAdminKillTasksArgs()
		err535 := containerStruct3.ReadField4(jsProt534)
		if err535 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Instances
		value3 := argvalue3
		fmt.Print(client.KillTasks(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "addInstances":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AddInstances requires 4 args")
			flag.Usage()
		}
		arg536 := flag.Arg(1)
		mbTrans537 := thrift.NewTMemoryBufferLen(len(arg536))
		defer mbTrans537.Close()
		_, err538 := mbTrans537.WriteString(arg536)
		if err538 != nil {
			Usage()
			return
		}
		factory539 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt540 := factory539.GetProtocol(mbTrans537)
		argvalue0 := api.NewAddInstancesConfig()
		err541 := argvalue0.Read(jsProt540)
		if err541 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg542 := flag.Arg(2)
		mbTrans543 := thrift.NewTMemoryBufferLen(len(arg542))
		defer mbTrans543.Close()
		_, err544 := mbTrans543.WriteString(arg542)
		if err544 != nil {
			Usage()
			return
		}
		factory545 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt546 := factory545.GetProtocol(mbTrans543)
		argvalue1 := api.NewLock()
		err547 := argvalue1.Read(jsProt546)
		if err547 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg548 := flag.Arg(3)
		mbTrans549 := thrift.NewTMemoryBufferLen(len(arg548))
		defer mbTrans549.Close()
		_, err550 := mbTrans549.WriteString(arg548)
		if err550 != nil {
			Usage()
			return
		}
		factory551 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt552 := factory551.GetProtocol(mbTrans549)
		argvalue2 := api.NewInstanceKey()
		err553 := argvalue2.Read(jsProt552)
		if err553 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		tmp3, err554 := (strconv.Atoi(flag.Arg(4)))
		if err554 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		fmt.Print(client.AddInstances(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "acquireLock":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AcquireLock requires 1 args")
			flag.Usage()
		}
		arg555 := flag.Arg(1)
		mbTrans556 := thrift.NewTMemoryBufferLen(len(arg555))
		defer mbTrans556.Close()
		_, err557 := mbTrans556.WriteString(arg555)
		if err557 != nil {
			Usage()
			return
		}
		factory558 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt559 := factory558.GetProtocol(mbTrans556)
		argvalue0 := api.NewLockKey()
		err560 := argvalue0.Read(jsProt559)
		if err560 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AcquireLock(value0))
		fmt.Print("\n")
		break
	case "releaseLock":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ReleaseLock requires 2 args")
			flag.Usage()
		}
		arg561 := flag.Arg(1)
		mbTrans562 := thrift.NewTMemoryBufferLen(len(arg561))
		defer mbTrans562.Close()
		_, err563 := mbTrans562.WriteString(arg561)
		if err563 != nil {
			Usage()
			return
		}
		factory564 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt565 := factory564.GetProtocol(mbTrans562)
		argvalue0 := api.NewLock()
		err566 := argvalue0.Read(jsProt565)
		if err566 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := api.LockValidation(tmp1)
		value1 := argvalue1
		fmt.Print(client.ReleaseLock(value0, value1))
		fmt.Print("\n")
		break
	case "replaceCronTemplate":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ReplaceCronTemplate requires 2 args")
			flag.Usage()
		}
		arg567 := flag.Arg(1)
		mbTrans568 := thrift.NewTMemoryBufferLen(len(arg567))
		defer mbTrans568.Close()
		_, err569 := mbTrans568.WriteString(arg567)
		if err569 != nil {
			Usage()
			return
		}
		factory570 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt571 := factory570.GetProtocol(mbTrans568)
		argvalue0 := api.NewJobConfiguration()
		err572 := argvalue0.Read(jsProt571)
		if err572 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg573 := flag.Arg(2)
		mbTrans574 := thrift.NewTMemoryBufferLen(len(arg573))
		defer mbTrans574.Close()
		_, err575 := mbTrans574.WriteString(arg573)
		if err575 != nil {
			Usage()
			return
		}
		factory576 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt577 := factory576.GetProtocol(mbTrans574)
		argvalue1 := api.NewLock()
		err578 := argvalue1.Read(jsProt577)
		if err578 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.ReplaceCronTemplate(value0, value1))
		fmt.Print("\n")
		break
	case "startJobUpdate":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "StartJobUpdate requires 2 args")
			flag.Usage()
		}
		arg579 := flag.Arg(1)
		mbTrans580 := thrift.NewTMemoryBufferLen(len(arg579))
		defer mbTrans580.Close()
		_, err581 := mbTrans580.WriteString(arg579)
		if err581 != nil {
			Usage()
			return
		}
		factory582 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt583 := factory582.GetProtocol(mbTrans580)
		argvalue0 := api.NewJobUpdateRequest()
		err584 := argvalue0.Read(jsProt583)
		if err584 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.StartJobUpdate(value0, value1))
		fmt.Print("\n")
		break
	case "pauseJobUpdate":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "PauseJobUpdate requires 2 args")
			flag.Usage()
		}
		arg586 := flag.Arg(1)
		mbTrans587 := thrift.NewTMemoryBufferLen(len(arg586))
		defer mbTrans587.Close()
		_, err588 := mbTrans587.WriteString(arg586)
		if err588 != nil {
			Usage()
			return
		}
		factory589 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt590 := factory589.GetProtocol(mbTrans587)
		argvalue0 := api.NewJobUpdateKey()
		err591 := argvalue0.Read(jsProt590)
		if err591 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.PauseJobUpdate(value0, value1))
		fmt.Print("\n")
		break
	case "resumeJobUpdate":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ResumeJobUpdate requires 2 args")
			flag.Usage()
		}
		arg593 := flag.Arg(1)
		mbTrans594 := thrift.NewTMemoryBufferLen(len(arg593))
		defer mbTrans594.Close()
		_, err595 := mbTrans594.WriteString(arg593)
		if err595 != nil {
			Usage()
			return
		}
		factory596 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt597 := factory596.GetProtocol(mbTrans594)
		argvalue0 := api.NewJobUpdateKey()
		err598 := argvalue0.Read(jsProt597)
		if err598 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.ResumeJobUpdate(value0, value1))
		fmt.Print("\n")
		break
	case "abortJobUpdate":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AbortJobUpdate requires 2 args")
			flag.Usage()
		}
		arg600 := flag.Arg(1)
		mbTrans601 := thrift.NewTMemoryBufferLen(len(arg600))
		defer mbTrans601.Close()
		_, err602 := mbTrans601.WriteString(arg600)
		if err602 != nil {
			Usage()
			return
		}
		factory603 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt604 := factory603.GetProtocol(mbTrans601)
		argvalue0 := api.NewJobUpdateKey()
		err605 := argvalue0.Read(jsProt604)
		if err605 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.AbortJobUpdate(value0, value1))
		fmt.Print("\n")
		break
	case "pulseJobUpdate":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PulseJobUpdate requires 1 args")
			flag.Usage()
		}
		arg607 := flag.Arg(1)
		mbTrans608 := thrift.NewTMemoryBufferLen(len(arg607))
		defer mbTrans608.Close()
		_, err609 := mbTrans608.WriteString(arg607)
		if err609 != nil {
			Usage()
			return
		}
		factory610 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt611 := factory610.GetProtocol(mbTrans608)
		argvalue0 := api.NewJobUpdateKey()
		err612 := argvalue0.Read(jsProt611)
		if err612 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.PulseJobUpdate(value0))
		fmt.Print("\n")
		break
	case "getRoleSummary":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetRoleSummary requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetRoleSummary())
		fmt.Print("\n")
		break
	case "getJobSummary":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetJobSummary requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetJobSummary(value0))
		fmt.Print("\n")
		break
	case "getTasksStatus":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTasksStatus requires 1 args")
			flag.Usage()
		}
		arg614 := flag.Arg(1)
		mbTrans615 := thrift.NewTMemoryBufferLen(len(arg614))
		defer mbTrans615.Close()
		_, err616 := mbTrans615.WriteString(arg614)
		if err616 != nil {
			Usage()
			return
		}
		factory617 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt618 := factory617.GetProtocol(mbTrans615)
		argvalue0 := api.NewTaskQuery()
		err619 := argvalue0.Read(jsProt618)
		if err619 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTasksStatus(value0))
		fmt.Print("\n")
		break
	case "getTasksWithoutConfigs":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTasksWithoutConfigs requires 1 args")
			flag.Usage()
		}
		arg620 := flag.Arg(1)
		mbTrans621 := thrift.NewTMemoryBufferLen(len(arg620))
		defer mbTrans621.Close()
		_, err622 := mbTrans621.WriteString(arg620)
		if err622 != nil {
			Usage()
			return
		}
		factory623 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt624 := factory623.GetProtocol(mbTrans621)
		argvalue0 := api.NewTaskQuery()
		err625 := argvalue0.Read(jsProt624)
		if err625 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTasksWithoutConfigs(value0))
		fmt.Print("\n")
		break
	case "getPendingReason":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPendingReason requires 1 args")
			flag.Usage()
		}
		arg626 := flag.Arg(1)
		mbTrans627 := thrift.NewTMemoryBufferLen(len(arg626))
		defer mbTrans627.Close()
		_, err628 := mbTrans627.WriteString(arg626)
		if err628 != nil {
			Usage()
			return
		}
		factory629 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt630 := factory629.GetProtocol(mbTrans627)
		argvalue0 := api.NewTaskQuery()
		err631 := argvalue0.Read(jsProt630)
		if err631 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPendingReason(value0))
		fmt.Print("\n")
		break
	case "getConfigSummary":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetConfigSummary requires 1 args")
			flag.Usage()
		}
		arg632 := flag.Arg(1)
		mbTrans633 := thrift.NewTMemoryBufferLen(len(arg632))
		defer mbTrans633.Close()
		_, err634 := mbTrans633.WriteString(arg632)
		if err634 != nil {
			Usage()
			return
		}
		factory635 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt636 := factory635.GetProtocol(mbTrans633)
		argvalue0 := api.NewJobKey()
		err637 := argvalue0.Read(jsProt636)
		if err637 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetConfigSummary(value0))
		fmt.Print("\n")
		break
	case "getJobs":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetJobs requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetJobs(value0))
		fmt.Print("\n")
		break
	case "getQuota":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetQuota requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetQuota(value0))
		fmt.Print("\n")
		break
	case "populateJobConfig":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PopulateJobConfig requires 1 args")
			flag.Usage()
		}
		arg640 := flag.Arg(1)
		mbTrans641 := thrift.NewTMemoryBufferLen(len(arg640))
		defer mbTrans641.Close()
		_, err642 := mbTrans641.WriteString(arg640)
		if err642 != nil {
			Usage()
			return
		}
		factory643 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt644 := factory643.GetProtocol(mbTrans641)
		argvalue0 := api.NewJobConfiguration()
		err645 := argvalue0.Read(jsProt644)
		if err645 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.PopulateJobConfig(value0))
		fmt.Print("\n")
		break
	case "getLocks":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetLocks requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetLocks())
		fmt.Print("\n")
		break
	case "getJobUpdateSummaries":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetJobUpdateSummaries requires 1 args")
			flag.Usage()
		}
		arg646 := flag.Arg(1)
		mbTrans647 := thrift.NewTMemoryBufferLen(len(arg646))
		defer mbTrans647.Close()
		_, err648 := mbTrans647.WriteString(arg646)
		if err648 != nil {
			Usage()
			return
		}
		factory649 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt650 := factory649.GetProtocol(mbTrans647)
		argvalue0 := api.NewJobUpdateQuery()
		err651 := argvalue0.Read(jsProt650)
		if err651 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetJobUpdateSummaries(value0))
		fmt.Print("\n")
		break
	case "getJobUpdateDetails":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetJobUpdateDetails requires 1 args")
			flag.Usage()
		}
		arg652 := flag.Arg(1)
		mbTrans653 := thrift.NewTMemoryBufferLen(len(arg652))
		defer mbTrans653.Close()
		_, err654 := mbTrans653.WriteString(arg652)
		if err654 != nil {
			Usage()
			return
		}
		factory655 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt656 := factory655.GetProtocol(mbTrans653)
		argvalue0 := api.NewJobUpdateKey()
		err657 := argvalue0.Read(jsProt656)
		if err657 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetJobUpdateDetails(value0))
		fmt.Print("\n")
		break
	case "getJobUpdateDiff":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetJobUpdateDiff requires 1 args")
			flag.Usage()
		}
		arg658 := flag.Arg(1)
		mbTrans659 := thrift.NewTMemoryBufferLen(len(arg658))
		defer mbTrans659.Close()
		_, err660 := mbTrans659.WriteString(arg658)
		if err660 != nil {
			Usage()
			return
		}
		factory661 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt662 := factory661.GetProtocol(mbTrans659)
		argvalue0 := api.NewJobUpdateRequest()
		err663 := argvalue0.Read(jsProt662)
		if err663 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetJobUpdateDiff(value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
